mkvirtualenv REST_FBVS
python3 -m pip install django or pip install -r /path/to/requirements.txt
django-admin startproject REST_FBVS

git: steps
git add .
git commit -m 'first commit'
git remote add origin https://github.com/shivshankar31/REST_FBVS.git
git push -u origin master

27: step 1: create project app, database setup
step 1.1: python3 manage.py startapp fbvapp
step 1.2: In settings.py, add 'fbvapp','rest_framework' to installed Apps
step 1.3: In settings.py, change database settings
 
28: step 2: create database, models
step 2.1: To create database create database StudentDB, use StudentDB, show tables
step 2.2: In models.py, create id, name and score field
step 2.3: now make migration

29: step 3: add serializer.py 
step 3.1: create class student serializer with modelserializer
step 3.2: import the student model from the app
step 3.3: call the model and fields inside meta class

30, 31: step 4: create Get, POST menthod
step 4.1: in views.py, create a get menthod
step 4.2: in views.py, create a post method to save the student record 

32: step 5: create detail view function
step 5.1: In views.py, create detail view using primary key

33, 34: step 6: add api_view, URL
step 6.1: import api_view from rest_framework.decorators, and add the methods with is responsible for 
step 6.2: In urls.py, create path for student_list function and student_detail

35: step 7: Test, correction
step 7.1: corrections, add @api_view for student_detail function
step 7.2: coorection, change max digits to 5 
step 7.3: add some recode to the table and run the url to do the test in UI.

37,38,39 Step 8: create new app for class based view
step 8.1: create new app for class based view, python3 manage.py startapp cbvapp
step 8.2: in models.py, create employee model
step 8.3: in serializer.py, create employee fields
step 8.4: in views.py, create class based view for get and post, import all nessary 

40: step 9: create class for get,put,delete
step 9.1 : in views.py, create class for get,put,delete

41: Step 10: Add URL and test

42 to 45: step 11: mixins
step 11.1: create new app and add the the app to settings.py
step 11.2: create models.py , serializer.py 
step 11.3: create view class and use mixins handler methods 
step 11.3: add url and test.

46, 47: step 12: Generics View
Step 12.1: import generics view, ListAPIView, RetrieveUpdateDestroyAPIView, CreateAPIView
step 12.2: now create the class and add queryset and serilizer_class

48, 49, 50: step 13: ViewSets
step 13.1: viewsets will` do the CRUD operation in 3 lines of code 
step 13.2: we can use ModelViewSets and ReadonlyModelViewsSets as well
step 13.3: add default router and include for ViewSets


51 to 56: step 14: nested serializer
step 14.1: create app nsapp and add to settings
step 14.2: create models class for author and book using foreginkey for use the other
step 14.3: create serializer.py and add ModelSerializer and call the two models
step 14.4: create views using generics views
step 14.5: add urls, make migrate and test

